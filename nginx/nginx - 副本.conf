user www-data;
worker_processes 1;
#daemon off;

#error_log  /var/log/nginx/error.log warn;
error_log  /var/log/nginx/error.log error;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections  1024;
    multi_accept on;
}

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_user [$time_local]  $http_x_Forwarded_for $remote_addr  $request '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$upstream_addr '
                      'ups_resp_time: $upstream_response_time '
                      'request_time: $request_time';

    access_log  /var/log/nginx/access.log  main;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 128k;
    sendfile        on;
    tcp_nopush     on;
    keepalive_timeout  60;
    tcp_nodelay on;
    open_file_cache max=65535 inactive=60s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;
    client_max_body_size 200M;

    upstream tao366-cluster{ # 要与server_name的名字一致
          server 172.18.0.41:80 weight=3 max_fails=1 fail_timeout=30s; #分别对应三台web服务器
          server 172.18.0.42:80 weight=2 max_fails=1 fail_timeout=30s;
          server 172.18.0.43:80 weight=5 max_fails=1 fail_timeout=30s;
    }
    server{
        listen 80; #nginx开启的端口
        server_name tao366.com; #测试域名
        location / {
            proxy_redirect off ;
            proxy_pass         http://tao366-cluster;
            proxy_set_header   Host             $host;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_connect_timeout 300;             #跟后端服务器连接超时时间，发起握手等候响应时间
            proxy_send_timeout 300;                #后端服务器回传时间，就是在规定时间内后端服务器必须传完所有数据
            proxy_read_timeout 600;                #连接成功后等待后端服务器的响应时间，已经进入后端的排队之中等候处理
            proxy_buffer_size 256k;                #代理请求缓冲区,会保存用户的头信息以供nginx进行处理
            proxy_buffers 4 256k;                  #同上，告诉nginx保存单个用几个buffer最大用多少空间
            proxy_busy_buffers_size 256k;          #如果系统很忙时候可以申请最大的proxy_buffers
            proxy_temp_file_write_size 256k;       #proxy缓存临时文件的大小
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_403 http_404;#某台down掉，直接转发到下一台正常服务器
            #proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            proxy_max_temp_file_size 128m;
            #proxy_cache mycache;                   #如果该域名负载的访问请求不需要缓存功能，那就将这以下四行全部注释掉。
            #proxy_cache_valid 200 302 1h;
            #proxy_cache_valid 301 1d;
            #proxy_cache_valid any 1m;
        }
        access_log /var/log/nginx/nginx.log main;  #添加日志记录
    }


	#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    gzip  on;
    gzip_min_length 1024;
    gzip_buffers 4 4k;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
  #  include /etc/nginx/conf.d/*;
}

